import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';
import { whopAPI } from '@/lib/whop-api';

// Validation function for bot settings
function isValidBotSettings(settings: any): boolean {
  if (!settings || typeof settings !== 'object') {
    return false;
  }

  // Check required fields exist and are correct types
  const requiredFields = {
    enabled: 'boolean',
    knowledgeBase: 'string',
    personality: 'string',
    customInstructions: 'string',
    responseStyle: 'string',
    autoResponse: 'boolean',
    responseDelay: 'number'
  };

  for (const [field, type] of Object.entries(requiredFields)) {
    if (!(field in settings) || typeof settings[field] !== type) {
      console.error(`Invalid field: ${field}, expected ${type}, got ${typeof settings[field]}`);
      return false;
    }
  }

  // Validate responseStyle enum
  const validResponseStyles = ['professional', 'friendly', 'casual', 'technical', 'custom'];
  if (!validResponseStyles.includes(settings.responseStyle)) {
    console.error(`Invalid responseStyle: ${settings.responseStyle}`);
    return false;
  }

  // Validate responseDelay range
  if (settings.responseDelay < 0 || settings.responseDelay > 30) {
    console.error(`Invalid responseDelay: ${settings.responseDelay}`);
    return false;
  }

  // Validate presetQA if it exists
  if (settings.presetQA && Array.isArray(settings.presetQA)) {
    for (const qa of settings.presetQA) {
      if (!qa || typeof qa !== 'object' || 
          typeof qa.id !== 'string' || 
          typeof qa.question !== 'string' || 
          typeof qa.answer !== 'string' || 
          typeof qa.enabled !== 'boolean') {
        console.error('Invalid presetQA item:', qa);
        return false;
      }
    }
  }

  return true;
}

const defaultSettings = {
  enabled: false,
  knowledgeBase: '',
  personality: '',
  customInstructions: '',
  forumPostingEnabled: false,
  targetForumIdForFeedCommand: '',
  presetQA: [],
  responseStyle: 'professional',
  autoResponse: true,
  responseDelay: 1
};

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ companyId: string }> }
) {
  try {
    const { companyId } = await params;
    
    // Find the company
    const company = await prisma.company.findUnique({
      where: { id: companyId }
    });
    
    // Return the settings from the company config with defaults
    const settings = {
      ...defaultSettings,
      ...((company?.config as any)?.botSettings || {})
    };

    return NextResponse.json({ settings });
  } catch (error) {
    console.error('Error fetching bot settings:', error);
    return NextResponse.json(
      { error: 'Failed to fetch settings' },
      { status: 500 }
    );
  }
}

export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ companyId: string }> }
) {
  try {
    const { companyId } = await params;
    const { settings } = await request.json();

    if (!isValidBotSettings(settings)) {
      return NextResponse.json({ error: 'Invalid settings data' }, { status: 400 });
    }

    // Remove forum auto-creation logic
    // const currentSettings = await prisma.botSettings.findUnique({
    //   where: { companyId },
    // });

    // if (
    //   settings.forumPostingEnabled && 
    //   !settings.targetForumIdForFeedCommand &&
    //   (!currentSettings || !currentSettings.targetForumIdForFeedCommand)
    // ) {
    //   console.log(`Forum posting enabled for ${companyId}, attempting to find/create Bot Announcements forum.`);
    //   try {
    //     const forum = await whopAPI.findOrCreateForum({
    //       ownerId: companyId, // Assuming companyId can be used as ownerId for the forum
    //       name: "Bot Announcements"
    //     });

    //     if (forum && forum.id) {
    //       console.log(`Forum 'Bot Announcements' found/created with ID: ${forum.id} for company ${companyId}.`);
    //       settings.targetForumIdForFeedCommand = forum.id;
          
    //       // Make an initial post to the newly created/found forum
    //       await whopAPI.createForumPost(
    //         {
    //           forumId: forum.id,
    //           title: "ðŸ“¢ AI Bot Announcements Channel Initialized!",
    //           content: "This forum will be used for announcements and posts generated by the AI Bot based on the !feed command. Monitor this channel for updates and AI-generated content."
    //         }
    //       );
    //       console.log(`Initial announcement post made to forum ${forum.id}.`);

    //     } else {
    //       console.warn(`Failed to find or create forum 'Bot Announcements' for company ${companyId}. The !feed command will require manual Forum ID configuration.`);
    //       // Optionally, prevent enabling forum posting if forum creation fails, or send a message back to client
    //     }
    //   } catch (error) {
    //     console.error(`Error during findOrCreateForum or initial post for company ${companyId}:`, error);
    //     // Handle error appropriately, maybe return an error response
    //   }
    // }

    const updatedCompany = await prisma.company.upsert({
      where: { id: companyId },
      update: {
        config: {
          botSettings: settings
        }
      },
      create: {
        id: companyId,
        name: "AI Support Company",
        config: {
          botSettings: settings
        }
      }
    });

    return NextResponse.json({ 
      success: true, 
      settings: (updatedCompany.config as any)?.botSettings 
    });
  } catch (error) {
    console.error('Error saving bot settings:', error);
    return NextResponse.json(
      { error: 'Failed to save settings' },
      { status: 500 }
    );
  }
} 